#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <omp.h>
#include <ctime>
#include <iostream>

const int NUM = 1024;

static double a[NUM][NUM], b[NUM][NUM], c[NUM][NUM], d[NUM][NUM], e[NUM][NUM], g[NUM][NUM];

#define gpuErrchk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
inline void gpuAssert(cudaError_t code, const char* file, int line, bool abort = true)
{
	if (code != cudaSuccess)
	{
		fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
		if (abort) exit(code);
	}
}

__global__ void multiplyGPU(double* a, double* b, double *c)
{
	int tidx = threadIdx.x + blockIdx.x * blockDim.x;
	int tidy = threadIdx.y + blockIdx.y * blockDim.y;
	double sch = 0;
	if (tidx < NUM && tidy < NUM)
	{
		for (int i = 0; i < NUM; i++)
		{
			sch += a[tidx * NUM + i] * b[i * NUM + tidy];
		}
		c[tidx * NUM + tidy] = sch;
	}
}

__global__ void sumGPU(double* a, double* b, double* c)
{
	int tidx = threadIdx.x + blockIdx.x * blockDim.x;
	int tidy = threadIdx.y + blockIdx.y * blockDim.y;
	if (tidx < NUM && tidy < NUM)
	    c[tidx * NUM + tidy] = a[tidx * NUM + tidy] + b[tidx * NUM + tidy];
}

void init_arr(double row, double col, double off, double a[][NUM])
{
	int i, j;

	for (i = 0; i < NUM; i++)
	{
		for (j = 0; j < NUM; j++)
		{
			a[i][j] = (row * i + col * j + off) - (row * i + col * j + off) / 1 + 1;
			//a[i][j] = row * i + col * j + off;
		}
	}
}

void pprint(double a[][NUM]) {
	for (int i = 0; i < NUM; i++)
	{
		for (int j = 0; j < NUM; j++)
		{
			printf("%f ", a[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

void multiply_d(double a[][NUM], double b[][NUM], double c[][NUM])
{
	int i, j, k;
#pragma omp parallel for 
	for (i = 0; i < NUM; i++) {
		for (j = 0; j < NUM; j++) {
			//#pragma omp parallel for
			for (k = 0; k < NUM; k++) {
				c[i][j] = c[i][j] + a[i][k] * b[k][j];
			}
		}
	}
}

void summ(double a[][NUM], double b[][NUM], double c[][NUM])
{
	int i, j;
#pragma omp parallel for
	for (i = 0; i < NUM; i++) {
		//#pragma omp parallel for
		for (j = 0; j < NUM; j++) {
			c[i][j] = a[i][j] + b[i][j];
		}
	}
}

int main()
{
	double start, stop;

	init_arr(3, -2, 1, a);
	init_arr(-2, 1, 3, b);

	double* aa = new double[NUM * NUM];
	double* bb = new double[NUM * NUM];
	double* ff = new double[NUM * NUM];
	double* cc = new double[NUM * NUM];

	double* a2, * b2, * c2, * d2, * g2, * f2;

	gpuErrchk(cudaMalloc((void**)&a2, NUM * NUM * sizeof(double)));
	gpuErrchk(cudaMalloc((void**)&b2, NUM * NUM * sizeof(double)));
	gpuErrchk(cudaMalloc((void**)&c2, NUM * NUM * sizeof(double)));
	gpuErrchk(cudaMalloc((void**)&d2, NUM * NUM * sizeof(double)));
	gpuErrchk(cudaMalloc((void**)&g2, NUM * NUM * sizeof(double)));
	gpuErrchk(cudaMalloc((void**)&f2, NUM * NUM * sizeof(double)));

	for (int i = 0; i < NUM; i++)
	{
		for (int j = 0; j < NUM; j++)
		{
			aa[i * NUM + j] = a[i][j];
			bb[i * NUM + j] = b[i][j];
		}
	}

	gpuErrchk(cudaMemcpy(a2, aa, NUM * NUM * sizeof(double), cudaMemcpyHostToDevice));
	gpuErrchk(cudaMemcpy(b2, bb, NUM * NUM * sizeof(double), cudaMemcpyHostToDevice));

	printf("NUM:%d\n", NUM);

	for (int i = 1; i <= 1; i++) {

		for (int j = 0; j < NUM; j++)
			for (int k = 0; k < NUM; k++)
			{
				c[j][k] = 0;
				d[j][k] = 0;
				e[j][k] = 0;
				g[j][k] = 0;
			}

		omp_set_num_threads(i);

		start = clock();

		//multiply_d(a, b, c);
		//multiply_d(a, c, d);
		//multiply_d(c, b, g);
		//summ(d, g, e);

		stop = clock();

		printf("threads: %d, NOMKL: time: %f;  ", i, (double)((stop - start) / 1000));

		cudaEvent_t startGPU, stopGPU;
		cudaEventCreate(&startGPU);
		cudaEventCreate(&stopGPU);

		dim3 gridSize = dim3((NUM + 31) / 32, (NUM + 31) / 32, 1);
		dim3 blockSize = dim3(32, 32, 1);

		cudaEventRecord(startGPU);

		multiplyGPU << <gridSize, blockSize >> > (a2, b2, c2);
		multiplyGPU << <gridSize, blockSize >> > (a2, c2, d2);
		multiplyGPU << <gridSize, blockSize >> > (c2, b2, g2);
		sumGPU << <gridSize, blockSize >> > (d2, g2, f2);

		gpuErrchk(cudaPeekAtLastError());
		gpuErrchk(cudaDeviceSynchronize());

		cudaEventRecord(stopGPU);
		gpuErrchk(cudaEventSynchronize(stopGPU));
		float milliseconds = 0;
		cudaEventElapsedTime(&milliseconds, startGPU, stopGPU);

		gpuErrchk(cudaMemcpy(ff, f2, NUM * NUM * sizeof(double), cudaMemcpyDeviceToHost));

		printf("CUDA: time: %f; ", (double)(milliseconds / 1000));

		int sch = 0;

		for (int j = 0; j < NUM; j++) {
			for (int k = 0; k < NUM; k++) {
				if (e[j][k] != ff[j * NUM + k]) {
					printf(" e: %f; f: %f:", e[j][k], ff[j * NUM + k]);
					printf(" wrong results!\n");
					sch = 1;
					break;
				}
			}
			if (sch == 1) break;
		}

		if (sch == 0) printf("  approved results\n");
	}

	cudaFree(a2);
	cudaFree(b2);
	cudaFree(c2);
	cudaFree(d2);
	cudaFree(g2);
	cudaFree(f2);
	system("pause");
}